#!/usr/bin/env python3
"""
Test script for PDF Conversion Agent
This script tests the PDF conversion functionality using xhtml2pdf
"""

import asyncio
import os
import sys
from datetime import datetime, timezone
from dotenv import load_dotenv

# Add the app directory to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

load_dotenv()

async def test_pdf_conversion_agent():
    """Test the PDF conversion agent functionality"""
    
    print("üß™ Testing PDF Conversion Agent")
    print("=" * 50)
    
    # Check environment variables
    print("\n1. Checking environment variables...")
    gemini_key = os.getenv("GOOGLE_API_KEY")
    
    if not gemini_key:
        print("‚ö†Ô∏è  GEMINI_API_KEY not found - AI-powered PDF generation will be limited")
    else:
        print("‚úÖ GEMINI_API_KEY configured")
    
    # Test PDF conversion agent import
    print("\n2. Testing PDF conversion agent import...")
    try:
        from app.services.pdf_conversion_agent import (
            pdf_agent, 
            convert_html_to_pdf_async,
            generate_pdf_from_json_async
        )
        print("‚úÖ PDF conversion agent imported successfully")
    except ImportError as e:
        print(f"‚ùå PDF conversion agent import failed: {e}")
        return False
    
    # Test basic HTML to PDF conversion
    print("\n3. Testing basic HTML to PDF conversion...")
    try:
        test_html = """
        <!DOCTYPE html>
        <html>
        <head>
        <style>
        body { 
            font-family: Arial, sans-serif; 
            font-size: 12pt; 
            margin: 20pt;
        }
        .title { 
            font-size: 18pt; 
            font-weight: bold; 
            text-align: center; 
            color: #2c3e50;
        }
        .section { 
            font-size: 14pt; 
            font-weight: bold; 
            margin: 15pt 0 8pt 0; 
            color: #34495e;
        }
        table { 
            width: 500pt; 
            table-layout: fixed; 
            border-collapse: collapse; 
            margin: 8pt 0; 
            font-size: 9pt;
        }
        th { 
            background-color: #ecf0f1; 
            padding: 4pt; 
            border: 1pt solid #bdc3c7; 
            font-weight: bold; 
            text-align: center;
        }
        td { 
            padding: 3pt; 
            border: 1pt solid #ecf0f1; 
            word-wrap: break-word; 
            vertical-align: top;
        }
        </style>
        </head>
        <body>
        
        <div class="title">ROI Performance Report</div>
        <div style="text-align: center; margin: 10pt 0 15pt 0; color: #7f8c8d;">
            Generated on """ + datetime.now().strftime("%B %d, %Y at %I:%M %p") + """
        </div>
        
        <div class="section">Executive Summary</div>
        <p>This is a test PDF report generated by the PDF Conversion Agent using xhtml2pdf.</p>
        
        <div class="section">Sample Data Table</div>
        <table>
        <thead>
        <tr>
            <th style="width: 80pt;">Date</th>
            <th style="width: 70pt;">Platform</th>
            <th style="width: 120pt;">Campaign</th>
            <th style="width: 60pt; text-align: right;">Revenue</th>
            <th style="width: 60pt; text-align: right;">Cost</th>
            <th style="width: 60pt; text-align: right;">ROI</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>2024-01-15</td>
            <td>Facebook</td>
            <td>Winter Sale Campaign</td>
            <td style="text-align: right;">$1,250.00</td>
            <td style="text-align: right;">$500.00</td>
            <td style="text-align: right;">$750.00</td>
        </tr>
        <tr>
            <td>2024-01-16</td>
            <td>Instagram</td>
            <td>Product Launch</td>
            <td style="text-align: right;">$2,100.00</td>
            <td style="text-align: right;">$800.00</td>
            <td style="text-align: right;">$1,300.00</td>
        </tr>
        <tr>
            <td>2024-01-17</td>
            <td>Google Ads</td>
            <td>Search Campaign</td>
            <td style="text-align: right;">$3,450.00</td>
            <td style="text-align: right;">$1,200.00</td>
            <td style="text-align: right;">$2,250.00</td>
        </tr>
        </tbody>
        </table>
        
        <div style="margin-top: 20pt; padding: 8pt; border: 1pt solid #bdc3c7; background-color: #f8f9fa;">
        <p><strong>Report Generated by:</strong> BOS Solution ROI Analytics System</p>
        <p><strong>Report ID:</strong> """ + datetime.now().strftime("%Y%m%d_%H%M%S") + """</p>
        </div>
        
        </body>
        </html>
        """
        
        # Convert HTML to PDF
        pdf_bytes, filename = await convert_html_to_pdf_async(test_html, "test_roi_report.pdf")
        
        print(f"‚úÖ Basic HTML to PDF conversion successful")
        print(f"   PDF size: {len(pdf_bytes)} bytes")
        print(f"   Filename: {filename}")
        
        # Save test PDF
        with open("test_roi_report.pdf", "wb") as f:
            f.write(pdf_bytes)
        print(f"   Test PDF saved as: test_roi_report.pdf")
        
    except Exception as e:
        print(f"‚ùå Basic HTML to PDF conversion failed: {e}")
        return False
    
    # Test simple ROI PDF generation
    print("\n4. Testing simple ROI PDF generation...")
    try:
        sample_roi_data = {
            "platforms": {
                "Facebook": {
                    "total_revenue": 12500.50,
                    "total_cost": 5000.00,
                    "total_roi": 7500.50
                },
                "Instagram": {
                    "total_revenue": 21000.75,
                    "total_cost": 8000.00,
                    "total_roi": 13000.75
                },
                "Google Ads": {
                    "total_revenue": 34500.25,
                    "total_cost": 12000.00,
                    "total_roi": 22500.25
                }
            },
            "campaigns": [
                {
                    "date": "2024-01-15",
                    "platform": "Facebook",
                    "campaign_name": "Winter Sale Campaign",
                    "revenue": 1250.00,
                    "cost": 500.00
                },
                {
                    "date": "2024-01-16",
                    "platform": "Instagram",
                    "campaign_name": "Product Launch",
                    "revenue": 2100.00,
                    "cost": 800.00
                },
                {
                    "date": "2024-01-17",
                    "platform": "Google Ads",
                    "campaign_name": "Search Campaign",
                    "revenue": 3450.00,
                    "cost": 1200.00
                }
            ]
        }
        
        # Generate simple ROI PDF
        pdf_bytes, filename = await pdf_agent.create_simple_roi_pdf(sample_roi_data, "simple_roi_report.pdf")
        
        print(f"‚úÖ Simple ROI PDF generation successful")
        print(f"   PDF size: {len(pdf_bytes)} bytes")
        print(f"   Filename: {filename}")
        
        # Save test PDF
        with open("simple_roi_report.pdf", "wb") as f:
            f.write(pdf_bytes)
        print(f"   Test PDF saved as: simple_roi_report.pdf")
        
    except Exception as e:
        print(f"‚ùå Simple ROI PDF generation failed: {e}")
        return False
    
    # Test AI-powered PDF generation (if Gemini is available)
    if gemini_key:
        print("\n5. Testing AI-powered PDF generation...")
        try:
            # Test with simple JSON data
            test_json_data = {
                "report_title": "AI-Generated ROI Report",
                "summary": "This report was generated using AI to convert JSON data to HTML, then to PDF.",
                "metrics": {
                    "total_revenue": 68000.50,
                    "total_cost": 25000.00,
                    "total_roi": 43000.50,
                    "roi_percentage": 172.0
                },
                "platforms": [
                    {"name": "Facebook", "revenue": 12500.50, "cost": 5000.00},
                    {"name": "Instagram", "revenue": 21000.75, "cost": 8000.00},
                    {"name": "Google Ads", "revenue": 34500.25, "cost": 12000.00}
                ]
            }
            
            # Generate AI-powered PDF
            pdf_bytes, filename = await generate_pdf_from_json_async(test_json_data, "ai_roi_report.pdf")
            
            print(f"‚úÖ AI-powered PDF generation successful")
            print(f"   PDF size: {len(pdf_bytes)} bytes")
            print(f"   Filename: {filename}")
            
            # Save test PDF
            with open("ai_roi_report.pdf", "wb") as f:
                f.write(pdf_bytes)
            print(f"   Test PDF saved as: ai_roi_report.pdf")
            
        except Exception as e:
            print(f"‚ùå AI-powered PDF generation failed: {e}")
            print(f"   This is expected if Gemini API is not properly configured")
    else:
        print("\n5. Skipping AI-powered PDF generation (no Gemini API key)")
    
    # Test PDF conversion agent methods
    print("\n6. Testing PDF conversion agent methods...")
    try:
        # Test synchronous wrapper
        from app.services.pdf_conversion_agent import convert_html_to_pdf_sync
        
        simple_html = """
        <!DOCTYPE html>
        <html>
        <head><style>body { font-family: Arial; font-size: 12pt; }</style></head>
        <body>
        <h1>Sync Test PDF</h1>
        <p>This PDF was generated using the synchronous wrapper.</p>
        </body>
        </html>
        """
        
        pdf_bytes, filename = convert_html_to_pdf_sync(simple_html, "sync_test.pdf")
        
        print(f"‚úÖ Synchronous PDF conversion successful")
        print(f"   PDF size: {len(pdf_bytes)} bytes")
        print(f"   Filename: {filename}")
        
        # Save test PDF
        with open("sync_test.pdf", "wb") as f:
            f.write(pdf_bytes)
        print(f"   Test PDF saved as: sync_test.pdf")
        
    except Exception as e:
        print(f"‚ùå Synchronous PDF conversion failed: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("‚úÖ All PDF conversion tests completed successfully!")
    print("\nThe PDF Conversion Agent is ready to use.")
    print("\nGenerated test files:")
    print("- test_roi_report.pdf (Basic HTML to PDF)")
    print("- simple_roi_report.pdf (Simple ROI template)")
    print("- sync_test.pdf (Synchronous conversion)")
    if gemini_key:
        print("- ai_roi_report.pdf (AI-powered generation)")
    
    print("\nTo use the PDF conversion agent:")
    print("1. Start your backend server")
    print("2. Use the /pdf endpoints:")
    print("   - POST /pdf/convert-html-to-pdf")
    print("   - POST /pdf/convert-json-to-pdf")
    print("   - POST /pdf/roi-report-to-pdf")
    print("   - GET /pdf/health")
    
    return True

async def main():
    """Main function"""
    try:
        success = await test_pdf_conversion_agent()
        if not success:
            print("\n‚ùå Some tests failed. Please check the errors above.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
