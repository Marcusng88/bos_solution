from fastapi import APIRouter, Depends, HTTPException, status
from typing import List
from app.core.supabase_client import supabase_client
from app.schemas.user_preferences import UserPreferencesCreate, UserPreferencesUpdate, UserPreferences as UserPreferencesSchema
from app.core.auth_utils import get_user_id_from_header

router = APIRouter()

@router.post("/", response_model=UserPreferencesSchema)
async def create_user_preferences(
    preferences: UserPreferencesCreate,
    user_id: str = Depends(get_user_id_from_header)
):
    """Create or update user preferences"""
    try:
        # Transform frontend values to match database constraints
        def transform_budget(budget: str) -> str:
            """Transform frontend budget values to database constraint values"""
            budget_mapping = {
                "0-1000": "$0 - $1,000",
                "1000-5000": "$1,000 - $5,000", 
                "5000-10000": "$5,000 - $10,000",
                "10000-25000": "$10,000 - $25,000",
                "25000+": "$25,000+"
            }
            return budget_mapping.get(budget, budget)
        
        def transform_company_size(size: str) -> str:
            """Transform frontend company size values to database constraint values"""
            size_mapping = {
                "solo": "1-10",
                "small": "1-10", 
                "medium": "11-50",
                "large": "51-200",
                "enterprise": "500+"
            }
            return size_mapping.get(size, size)
        
        # Prepare data for Supabase with transformed values and all required fields
        preference_data = {
            "user_id": user_id,
            "industry": preferences.industry,
            "company_size": transform_company_size(preferences.company_size),
            "marketing_goals": preferences.marketing_goals,
            "monthly_budget": transform_budget(preferences.monthly_budget)
            # id, created_at, updated_at will be auto-generated by Supabase
        }
        
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.upsert_user_preferences(preference_data)
        
        if result:
            return result
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to save user preferences via Supabase API"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to save user preferences: {str(e)}"
        )

@router.get("/", response_model=UserPreferencesSchema)
async def get_user_preferences(
    user_id: str = Depends(get_user_id_from_header)
):
    """Get user preferences"""
    try:
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.get_user_preferences(user_id)
        
        if result:
            return result
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User preferences not found"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get user preferences: {str(e)}"
        )

@router.put("/", response_model=UserPreferencesSchema)
async def update_user_preferences(
    preferences: UserPreferencesUpdate,
    user_id: str = Depends(get_user_id_from_header)
):
    """Update user preferences"""
    try:
        # Transform frontend values to match database constraints
        def transform_budget(budget: str) -> str:
            """Transform frontend budget values to database constraint values"""
            budget_mapping = {
                "0-1000": "$0 - $1,000",
                "1000-5000": "$1,000 - $5,000", 
                "5000-10000": "$5,000 - $10,000",
                "10000-25000": "$10,000 - $25,000",
                "25000+": "$25,000+"
            }
            return budget_mapping.get(budget, budget)
        
        def transform_company_size(size: str) -> str:
            """Transform frontend company size values to database constraint values"""
            size_mapping = {
                "solo": "1-10",
                "small": "1-10", 
                "medium": "11-50",
                "large": "51-200",
                "enterprise": "500+"
            }
            return size_mapping.get(size, size)
        
        # Prepare data for Supabase with transformed values and all required fields
        preference_data = {
            "user_id": user_id,
            "industry": preferences.industry,
            "company_size": transform_company_size(preferences.company_size),
            "marketing_goals": preferences.marketing_goals,
            "monthly_budget": transform_budget(preferences.monthly_budget)
            # id, created_at, updated_at will be auto-generated by Supabase
        }
        
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.upsert_user_preferences(preference_data)
        
        if result:
            return result
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User preferences not found"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to update user preferences: {str(e)}"
        )
