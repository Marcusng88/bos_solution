from fastapi import APIRouter, Depends, HTTPException, status
from typing import List
from app.core.supabase_client import supabase_client
from app.schemas.my_competitor import MyCompetitorCreate, MyCompetitorUpdate, MyCompetitor as MyCompetitorSchema
from app.core.auth_utils import get_user_id_from_header

router = APIRouter()

@router.post("/", response_model=MyCompetitorSchema)
async def create_competitor(
    competitor: MyCompetitorCreate,
    user_id: str = Depends(get_user_id_from_header)
):
    """Create a new competitor entry or return existing one if duplicate"""
    try:
        # Check if competitor already exists for this user
        existing_competitors = await supabase_client.get_user_competitors(user_id)
        existing_competitor = next(
            (comp for comp in existing_competitors if comp.get("competitor_name") == competitor.competitor_name),
            None
        )
        
        if existing_competitor:
            # Return existing competitor instead of creating duplicate
            return existing_competitor
        
        # Prepare data for Supabase with all required fields
        competitor_data = {
            "user_id": user_id,
            "competitor_name": competitor.competitor_name,
            "website_url": competitor.website_url,
            "active_platforms": competitor.active_platforms
            # id, created_at, updated_at will be auto-generated by Supabase
        }
        
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.create_competitor(competitor_data)
        
        if result and result.get("success"):
            return result.get("data", result)
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to create competitor via Supabase API"
            )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create competitor: {str(e)}"
        )

@router.get("/", response_model=List[MyCompetitorSchema])
async def get_user_competitors(
    user_id: str = Depends(get_user_id_from_header)
):
    """Get all competitors for the current user"""
    try:
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.get_user_competitors(user_id)
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get competitors: {str(e)}"
        )

@router.put("/{competitor_id}", response_model=MyCompetitorSchema)
async def update_competitor(
    competitor_id: str,
    competitor: MyCompetitorUpdate,
    user_id: str = Depends(get_user_id_from_header)
):
    """Update a competitor entry"""
    try:
        # Prepare data for Supabase with all required fields
        competitor_data = {
            "user_id": user_id,
            "competitor_name": competitor.competitor_name,
            "website_url": competitor.website_url,
            "active_platforms": competitor.active_platforms
            # id, created_at, updated_at will be auto-generated by Supabase
        }
        
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.update_competitor(competitor_id, competitor_data)
        
        if result:
            return result
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Competitor not found"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to update competitor: {str(e)}"
        )

@router.delete("/{competitor_id}")
async def delete_competitor(
    competitor_id: str,
    user_id: str = Depends(get_user_id_from_header)
):
    """Delete a competitor entry"""
    try:
        # Use Supabase REST API instead of direct database connection
        result = await supabase_client.delete_competitor(competitor_id, user_id)
        
        if result:
            return {"message": "Competitor deleted successfully"}
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Competitor not found"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to delete competitor: {str(e)}"
        )
